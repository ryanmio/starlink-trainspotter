"use client"

import { useRef, useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Download, Share2, ImageIcon } from "lucide-react"
import type { Pass, UserLocation } from "@/lib/types"

interface ShareableCardProps {
  pass: Pass
  location: UserLocation
  onClose?: () => void
}

export function ShareableCard({ pass, location, onClose }: ShareableCardProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [cardGenerated, setCardGenerated] = useState(false)
  const [generating, setGenerating] = useState(false)

  useEffect(() => {
    generateCard()
  }, [pass, location])

  const generateCard = async () => {
    if (!canvasRef.current) return

    setGenerating(true)
    const canvas = canvasRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Set canvas size for high-quality output
    const width = 800
    const height = 600
    canvas.width = width
    canvas.height = height

    // Create gradient background
    const gradient = ctx.createLinearGradient(0, 0, width, height)
    gradient.addColorStop(0, "#0f172a") // slate-900
    gradient.addColorStop(0.5, "#1e3a8a") // blue-800
    gradient.addColorStop(1, "#312e81") // indigo-800

    ctx.fillStyle = gradient
    ctx.fillRect(0, 0, width, height)

    // Add subtle pattern overlay
    await addPatternOverlay(ctx, width, height)

    // Draw main content
    await drawCardContent(ctx, pass, location, width, height)

    setCardGenerated(true)
    setGenerating(false)
  }

  const addPatternOverlay = async (ctx: CanvasRenderingContext2D, width: number, height: number) => {
    // Add subtle star pattern
    ctx.fillStyle = "rgba(255, 255, 255, 0.1)"
    for (let i = 0; i < 50; i++) {
      const x = Math.random() * width
      const y = Math.random() * height
      const size = Math.random() * 2 + 1
      ctx.beginPath()
      ctx.arc(x, y, size, 0, Math.PI * 2)
      ctx.fill()
    }
  }

  const drawCardContent = async (
    ctx: CanvasRenderingContext2D,
    pass: Pass,
    location: UserLocation,
    width: number,
    height: number,
  ) => {
    // Header section
    ctx.fillStyle = "white"
    ctx.font = "bold 36px system-ui, -apple-system, sans-serif"
    ctx.textAlign = "center"
    ctx.fillText("Starlink Train Sighting", width / 2, 60)

    // Subtitle
    ctx.font = "24px system-ui, -apple-system, sans-serif"
    ctx.fillStyle = "#93c5fd" // blue-300
    ctx.fillText(pass.launchName || "Starlink Mission", width / 2, 100)

    // Location
    ctx.font = "18px system-ui, -apple-system, sans-serif"
    ctx.fillStyle = "#cbd5e1" // slate-300
    ctx.fillText(`Visible from ${location.name || "Your Location"}`, width / 2, 130)

    // Main info section
    const leftCol = 80
    const rightCol = width - 80
    const centerCol = width / 2
    let yPos = 180

    // Date and time box
    drawInfoBox(ctx, leftCol, yPos, 300, 120, "Date & Time", [
      `Date: ${pass.start.toLocaleDateString()}`,
      `Start: ${pass.start.toLocaleTimeString()}`,
      `Peak: ${pass.peak.toLocaleTimeString()}`,
      `End: ${pass.end.toLocaleTimeString()}`,
    ])

    // Pass details box
    drawInfoBox(ctx, rightCol - 300, yPos, 300, 120, "Pass Details", [
      `Max Elevation: ${pass.maxElDeg.toFixed(0)}°`,
      `Duration: ${Math.round((pass.end.getTime() - pass.start.getTime()) / 60000)}m`,
      `Path: ${pass.azStart.toFixed(0)}° → ${pass.azEnd.toFixed(0)}°`,
      `Score: ${pass.score.toFixed(1)}`,
    ])

    yPos += 150

    // Brightness and visibility
    const brightness = getBrightnessDescription(pass.score, pass.phaseAngleDeg)
    drawInfoBox(ctx, leftCol, yPos, 300, 100, "Expected Brightness", [
      brightness.level,
      brightness.description,
      `Phase Angle: ${pass.phaseAngleDeg.toFixed(0)}°`,
    ])

    // Booster information
    if (pass.boosterInfo) {
      drawInfoBox(ctx, rightCol - 300, yPos, 300, 100, "Booster Lineage", [
        `Core: ${pass.boosterInfo.coreId.slice(0, 12)}...`,
        `Flight #${pass.boosterInfo.flightNumber}`,
        `Landing: ${pass.boosterInfo.landingType}`,
      ])
    }

    yPos += 130

    // Sky path visualization
    drawSkyPath(ctx, pass, centerCol - 150, yPos, 300, 150)

    // Footer
    ctx.font = "14px system-ui, -apple-system, sans-serif"
    ctx.fillStyle = "#64748b" // slate-500
    ctx.textAlign = "center"
    ctx.fillText("Generated by Trainspotter • trainspotter.app", width / 2, height - 30)
    ctx.fillText(`Created on ${new Date().toLocaleDateString()}`, width / 2, height - 10)
  }

  const drawInfoBox = (
    ctx: CanvasRenderingContext2D,
    x: number,
    y: number,
    width: number,
    height: number,
    title: string,
    lines: string[],
  ) => {
    // Box background
    ctx.fillStyle = "rgba(255, 255, 255, 0.1)"
    ctx.fillRect(x, y, width, height)

    // Box border
    ctx.strokeStyle = "rgba(255, 255, 255, 0.2)"
    ctx.lineWidth = 1
    ctx.strokeRect(x, y, width, height)

    // Title
    ctx.fillStyle = "#fbbf24" // amber-400
    ctx.font = "bold 16px system-ui, -apple-system, sans-serif"
    ctx.textAlign = "left"
    ctx.fillText(title, x + 15, y + 25)

    // Content lines
    ctx.fillStyle = "white"
    ctx.font = "14px system-ui, -apple-system, sans-serif"
    lines.forEach((line, index) => {
      ctx.fillText(line, x + 15, y + 50 + index * 20)
    })
  }

  const drawSkyPath = (
    ctx: CanvasRenderingContext2D,
    pass: Pass,
    x: number,
    y: number,
    width: number,
    height: number,
  ) => {
    const centerX = x + width / 2
    const centerY = y + height / 2
    const radius = Math.min(width, height) / 2 - 20

    // Draw sky circle
    ctx.strokeStyle = "rgba(255, 255, 255, 0.3)"
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2)
    ctx.stroke()

    // Draw elevation circles
    ;[30, 60].forEach((elevation) => {
      const r = (radius * (90 - elevation)) / 90
      ctx.strokeStyle = "rgba(255, 255, 255, 0.1)"
      ctx.lineWidth = 1
      ctx.beginPath()
      ctx.arc(centerX, centerY, r, 0, Math.PI * 2)
      ctx.stroke()
    })

    // Draw cardinal directions
    ctx.fillStyle = "#93c5fd" // blue-300
    ctx.font = "12px system-ui, -apple-system, sans-serif"
    ctx.textAlign = "center"
    ctx.fillText("N", centerX, y + 15)
    ctx.fillText("S", centerX, y + height - 5)
    ctx.textAlign = "left"
    ctx.fillText("E", x + width - 15, centerY + 4)
    ctx.fillText("W", x + 10, centerY + 4)

    // Draw pass path
    const startPoint = azElToXY(pass.azStart, 20, centerX, centerY, radius)
    const peakPoint = azElToXY((pass.azStart + pass.azEnd) / 2, pass.maxElDeg, centerX, centerY, radius)
    const endPoint = azElToXY(pass.azEnd, 20, centerX, centerY, radius)

    // Draw path line
    ctx.strokeStyle = "#10b981" // emerald-500
    ctx.lineWidth = 3
    ctx.beginPath()
    ctx.moveTo(startPoint.x, startPoint.y)
    ctx.quadraticCurveTo(peakPoint.x, peakPoint.y, endPoint.x, endPoint.y)
    ctx.stroke()

    // Draw peak point
    ctx.fillStyle = "#10b981"
    ctx.beginPath()
    ctx.arc(peakPoint.x, peakPoint.y, 4, 0, Math.PI * 2)
    ctx.fill()

    // Label
    ctx.fillStyle = "white"
    ctx.font = "bold 14px system-ui, -apple-system, sans-serif"
    ctx.textAlign = "center"
    ctx.fillText("Sky Path", centerX, y + height + 20)
  }

  const downloadCard = () => {
    if (!canvasRef.current || !cardGenerated) return

    const canvas = canvasRef.current
    const link = document.createElement("a")
    link.download = `starlink-pass-${pass.start.toISOString().split("T")[0]}.png`
    link.href = canvas.toDataURL("image/png")
    link.click()
  }

  const shareCard = async () => {
    if (!canvasRef.current || !cardGenerated) return

    const canvas = canvasRef.current
    canvas.toBlob(async (blob) => {
      if (!blob) return

      if (navigator.share && navigator.canShare) {
        try {
          const file = new File([blob], `starlink-pass-${pass.start.toISOString().split("T")[0]}.png`, {
            type: "image/png",
          })

          if (navigator.canShare({ files: [file] })) {
            await navigator.share({
              title: `Starlink Train Pass - ${pass.launchName}`,
              text: `Starlink satellite train visible from ${location.name} on ${pass.start.toLocaleDateString()}`,
              files: [file],
            })
            return
          }
        } catch (error) {
          console.log("Native sharing failed, falling back to download")
        }
      }

      // Fallback to download
      downloadCard()
    }, "image/png")
  }

  return (
    <Card className="bg-white/10 backdrop-blur-sm border-white/20">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2 text-white">
              <ImageIcon className="h-5 w-5" />
              Shareable Pass Card
            </CardTitle>
            <CardDescription className="text-blue-200">
              Generate a beautiful card to share your Starlink sighting
            </CardDescription>
          </div>
          {onClose && (
            <Button onClick={onClose} size="sm" variant="ghost" className="text-white hover:bg-white/10">
              ×
            </Button>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Canvas for card generation */}
          <div className="flex justify-center">
            <canvas
              ref={canvasRef}
              className="max-w-full h-auto border border-white/20 rounded-lg"
              style={{ maxHeight: "400px" }}
            />
          </div>

          {/* Action buttons */}
          <div className="flex gap-2 justify-center">
            <Button
              onClick={downloadCard}
              disabled={!cardGenerated || generating}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Download className="h-4 w-4 mr-2" />
              {generating ? "Generating..." : "Download PNG"}
            </Button>
            <Button
              onClick={shareCard}
              disabled={!cardGenerated || generating}
              variant="outline"
              className="border-white/20 text-white hover:bg-white/10 bg-transparent"
            >
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>

          {generating && <div className="text-center text-blue-200 text-sm">Generating your shareable card...</div>}
        </div>
      </CardContent>
    </Card>
  )
}

// Helper function to convert azimuth/elevation to x/y coordinates
function azElToXY(azimuth: number, elevation: number, centerX: number, centerY: number, maxRadius: number) {
  const radius = (maxRadius * (90 - elevation)) / 90
  const angleRad = ((azimuth - 90) * Math.PI) / 180 // Adjust for North = up
  return {
    x: centerX + radius * Math.cos(angleRad),
    y: centerY + radius * Math.sin(angleRad),
  }
}

// Helper function to get brightness description
function getBrightnessDescription(score: number, phaseAngle: number) {
  if (score > 8) {
    return {
      level: "Excellent Visibility",
      description: "Very bright, easily visible",
    }
  } else if (score > 6) {
    return {
      level: "Good Visibility",
      description: "Bright and clearly visible",
    }
  } else if (score > 4) {
    return {
      level: "Moderate Visibility",
      description: "Visible with clear skies",
    }
  } else {
    return {
      level: "Fair Visibility",
      description: "May require dark skies",
    }
  }
}
